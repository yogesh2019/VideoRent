********* intro
restful webservices using asp.net webapi
we will talk about DTO 

*************** what is Web ApI

quick view of asp.net mvc architecture

when a request arrives 
mvc framework handles that request to an action in controller  

this action most of the times returns a view

which is then parsed by RazorViewEngine

then html markup is generated on the server
and then returned to the client

now instead of return markup data

they can also return data

one benefit is
* sending raw data requires less rescources
* raw data requires less bandwidth

so data arrives faster at client
* we can build a broad range of client

these apps simply call our endpoints

get the data and generate the view locally

We call this endpoint
Dataservices or Web API
because they just return data and not markup

these are not just for our mobile and web apps

they can be consumed by other websites as well

for ex twitter,etc 

expose public services which we can consume in our websites

we can have services not only to get data 

but also modifying like adding a customer


the framework we use is 
Asp.net Web Api


.net core uses both asp.net and asp.net web api

we will be building some app using jquery

**********************************RestFul Convention

we will be building CRUD for customers

end point 
/api/customer

and we are going to support few different types of requests

get 
get 
post
put
delete

so what you see here is

in terms of request types and endpoints is a standard convention referred to as REST full convenction

ReSt 
representational state transfer






********* building a web api

under controller create a api folder

create a controller
and choose webapi2 controller

CustomersController

plural

the tesxt guides us


add the line to global.as

the first things you want to note here is 

this is derived from ApiController

since we want to return a list of Customer
// GEt /api/customers

public IEnumerable <Customer> GetCustomers(){

}

we are gonna _context

so lets create a private field

initilize is in ctor

public Customer GetCustomer(){
.Customers.SingleOrDefault


 if customer == null
  throw new HttpResponseException(HttpStatusCode.NotFoun);

  so this is a part of restful convention 
  like if a resourse is not found we repond with not found

  other wise 
  return customer
}

// POST /api/customers

as i want to post it on collection

we should mark this action with http post
this action will only be called if we send a post request

[HttpPost]
public Customer CreateCustomer(Customer customer)

or 


public Customer PostCustomer(Customer customer)

but this can be a problem with when we refractor

so i would prefer to apply this [HttpPost]



if(!ModelState.IsValid)
 throw new HttpReponseException(httpstatuscode.badrequest)

 _context.Customers.Add(customer);
 _context.SaveChanges()


 // PUT /api/customer/1

 public void UpdateCustomer (int id){
 
if(!ModelState.IsValid)
 throw new HttpReponseException(httpstatuscode.badrequest)

 var customerInDb = singleorDefault( c => c.Id == id
 
 if null
	throw new HttpResponseException(HttpStatusCode.NotFound
);

  .name = name

  we can use automapper

  _context

  httpPut

  [HTTPdELETE]
  public void DeleteCustomer(int id){
  
  }
  .remove
  .saveChanges
 )
 }

 ************* testing the api

 we can see that list of our customers returns xml

 media formatter return xml, json

 if we refresh and see our request, 
 under response we will see content type

 when posting we need to remove the id



 ************ data transfer object

 there are couple of issues with this api

 the api recieves or returns Customer objects 

 whats wrong with this

 well this customer object is part of the domain model of our application

 its consists implementation detail which can change frequently

 and these changes can break clients that are dependent on the customer object


 so we need to make the contract of this api as stable as possible

 yes its can change

 but the public model changes at a slower pace than our domain model

 we use DTO for this

 this dto is plain Data Structure and is used to transfer data from client to server


 by this we reduce chances of breaking as we refractor our domain model

 how to design this is different

 but

 the main thing is your api should never return or recieve DOMAIN OBJECT

 2. another things is by using your domain object your are opening security holes in your application

  a hacker can easily map data to domain object and they will easily be mapped


  if we use DTO
  if can simply exculde the props that can be updated


  in solution explorer add a new folder Dto


  create a new Class CustomerDto

  i will copy all from customer class

  so since this create depency 

  i want to create another dto for membershihptype

  this make you Dto's compeletly decoupled from you domain objects

  next i will show you how to use automapper to map these objects





  ************* auto mapper

  install-package automapper -version:4.1



  now we need to create a mapping profile to determine how objects of different 
  types are mapped to each other

  under App_start

  we add a class called mapping profile

  we derive this form Profile which is in AutoMapper

  under ctor

  we init a mapper

  so this is a generic method that takes two parameter

  source and target

  Mapper.CreateMap<Customer, CustomerDto>();
    Mapper.CreateMap<CustomerDto, Customer>();

its	convention based tool because it used convention of name property

now we need to load this application profile
when the app start

go we go to the Global.asax
Mapper.Initilize(c => c.AddProfile<MappingProfile>);

so this was the setup code


getCustomers

Customer > CustomerDto


we are gonna use Linq method Select

toList().Select(Mapper.Map<Customer, CustomerDto>)

2. getCustomer

here only one single is returned to we cannot use the link select

Mapper.Map<Customer, CustomerDto> (Customer)

we need to change the return type as well

3. CreateCustomer


public CustomerDto CreateCustomer(CustomerDto customerDto){



if(!ModelState.IsValid)

var customer = Mapper.Map<CustomerDto, Customer>(customerDto)
_context.add
_savechange
return custDto



}

Mapper.Map<CustomerDto,Customer> (customerDto,customerInDb)

next we will talk about camelNotation















