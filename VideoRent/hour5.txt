you will see both server side and client side validation
we will see forgery requests and how we can prevent them in our form

mvc also uses data validation annotation to validate action parameters

so Save first while getting properties from request it checks there only if they are acc to annotations

here we can use ModelState.
to get access to validation data

ModelState.idValid

this we can use to change the application flow

if(!ModelState.isValid){

this viewModel we will initialize with whatever data user is setting to customer
	return View("CustomerForm", viewModel)
}

2nd step is to add annotation

3rd step is to add validation messages

we need to add a place holder to add validation message


@html.ValidationMessageFor(m => m.Customer.Name)

this field is required

but this is not red next i will show you how to get this as red


styling validation errors

when we click on inspect we have a class

so we have to define this class in our css and apply a style

go under site.css

.field-validation-error{
	color: red;
}

its good practise to highlight validation error

.input-validation-error{
	border: 2px solid red;
}

so we see a red

but for MembershipType
we dont have a validation error

it will give us a message

so lets clarify something here


since we donot have required on membership type id 
and membershiptype

then why we are getting that validation message

byte? so this is implicitly required

since mvc framework doesn't know how to map this empty to a byte so it gives us error

************************** Date Annotations
so far we have seen Required and StringLenght

Range(1,10)
compare
phone
emailAddress

url 
and regex

all these have their default validation message

let me show you how you can override it

[Required(ErrorMessage = "please enter customer's name")]




********************** let see how to implement Custom Validation

ex lets say a business logic

if they want to someone to be 18 years of age

before getting memebership


so to implement this right click models

add a class under models

Min18YearIfAMember



we need to derive this class from validation attributes 


here we need to override is valid method


this has two overloads

one that takes a validation context and the other that takes a validationContext


so before we implement logic

let apply it as annotation



************** refractoring magic numbers

ok let see how to get rid of this magic numbers

the reason why we should avoid using 0 or 1 or number 
is that they avoid maintainability of your application

but the other dev has no idea what is 0 or 1

here we are gonna define membershiptypes
under MembershipType class

i made it readonly as i dont want to change it by mistake

public static readonly byte Unknown = 0
public static readonly byte PayAsYouGo = 1


so what about the other memebership types 
do we need to define all here


another solution to refractor a magic number is using a enum
but we may need casting to byte again to compare

**************** validation summary
some people may also like to display a list of errors at the top

so at the top 

we can use @Html.ValidationSummar()

we see three error messages

so when this form is posted value of customer id is empty

so when you initilize the 

var customer = new Customer()

its property will be init to default values

the first argument to valitionsummary(true, "please fix the error")

and what is required here is to put membershipType first before dateOfbirth

************************ client side validation	

while server side validation is abs crucial for secure application

its nice to do validation in client side as well

Benefits
* immediate feedback
* No waste of server side resources
* we do server side mostly for security

by default client side validation is not enabled on you asp app

let see how

app_start >> BundleConfig >> 

we have this bundle called jqueryval

if we go to solution explorer

i will go in customerForm.cshtml

and at the bottom

@section scripts{
	@Scripts.Render("address")
}
@section scripts{
	@Scripts.Render("~/bundles/jqueryval")
}

ctrl + f5 to get fresh copy of this page

so if we see in network tab ther is no call going outside


let see how this is happening

the good things about annotations is

the asp.net used them for both client side and server side validation

also when we use razorview helpder methods

razorview engines

adds additional attributes to the html markup

jquery validation kicks in to see data- props

one things we need to know about these validations

is that they only work with standard annotation








******************* Anti Forgery Tokens	
here we have a security hole in this form for customers

when we click on save it sends a post request

and we can see the form data in the body of this request

imagine if the user leaves the site without signing out

cross-site request forgery

so the hacker forges a request on diff website
in this ex hacker can create or update an existing customer

and we will also not notice this on our logs 
as the user browser is making the request

so how do we prevent this 

we will make sure that this request only comes from our customer form

there are two steps we need to folow
@Html.AntiForgeryToken()

this method will create a token which is like a code 

and we will put it in as a hidden field and also as a cookie in user's computer


we can see if we inspect this 
and we can also see the same in enrypted format under resources > cookies > localhost


so in our backend we will match this hidden field with our encryption

and the hidden field is only send via customer form

so fi they dont match this is an attack

now to perform the validation 

we validate our	save method with [ValidateAntiForgeryToken]