you will see both server side and client side validation
we will see forgery requests and how we can prevent them in our form

mvc also uses data validation annotation to validate action parameters

so Save first while getting properties from request it checks there only if they are acc to annotations

here we can use ModelState.
to get access to validation data

ModelState.idValid

this we can use to change the application flow

if(!ModelState.isValid){

this viewModel we will initialize with whatever data user is setting to customer
	return View("CustomerForm", viewModel)
}

2nd step is to add annotation

3rd step is to add validation messages

we need to add a place holder to add validation message


@html.ValidationMessageFor(m => m.Customer.Name)

this field is required

but this is not red next i will show you how to get this as red


styling validation errors

when we click on inspect we have a class

so we have to define this class in our css and apply a style

go under site.css

.field-validation-error{
	color: red;
}

its good practise to highlight validation error

.input-validation-error{
	border: 2px solid red;
}

so we see a red

but for MembershipType
we dont have a validation error

it will give us a message

so lets clarify something here


since we donot have required on membership type id 
and membershiptype

then why we are getting that validation message

byte? so this is implicitly required

since mvc framework doesn't know how to map this empty to a byte so it gives us error

************************** Date Annotations
so far we have seen Required and StringLenght

Range(1,10)
compare
phone
emailAddress

url 
and regex

all these have their default validation message

let me show you how you can override it

[Required(ErrorMessage = "please enter customer's name")]




********************** let see how to implement Custom Validation

ex lets say a business logic

if they want to someone to be 18 years of age

before getting memebership


so to implement this right click models

add a class under models

Min18YearIfAMember



we need to derive this class from validation attributes 


here we need to override is valid method


this has two overloads

one that takes a validation context and the other that takes a validationContext


so before we implement logic

let apply it as annotation



************** refractoring magic numbers

ok let see how to get rid of this magic numbers

the reason why we should avoid using 0 or 1 or number 
is that they avoid maintainability of your application

but the other dev has no idea what is 0 or 1

here we are gonna define membershiptypes
under MembershipType class

i made it readonly as i dont want to change it by mistake

public static readonly byte Unknown = 0
public static readonly byte PayAsYouGo = 1


so what about the other memebership types 
do we need to define all here


another solution to refractor a magic number is using a enum
but we may need casting to byte again to compare

**************** validation summary
some people may also like to display a list of errors at the top

so at the top 

we can use @Html.ValidationSummar()

we see three error messages

so when this form is posted value of customer id is empty

so when you initilize the 

var customer = new Customer()

its property will be init to default values

the first argument to valitionsummary(true, "please fix the error")

and what is required here is to put membershipType first before dateOfbirth