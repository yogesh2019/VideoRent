in this section we are going to add forms
that will help us add and edit customer and movies

to create a form that add customer we need an action

this action should return a view that includes the form


under customerContoller

mvcaction4 tab

now since view is red

here as we dont have this view

so we will go and create a view

create a non partial view and layout is selected

lets change the title to new customer

now to render a form we are gonna use html helper method

like action link

@Html.BeginForm("<action_name>","<Controller_name>")

this action name is red as we didn't declare

now how to render the closing tag


@using( Html.BeginForm("Create","Customer")){

now here we need to follow some specific markup that bootstrap understands

<div class="form-group">
we can use label or write @Html.LabelFor()

and in this we specify a lambda expression that gives us the name of of the target property of the model used in this form


so let set the model


@model Video.Model.Customer

we can use label or write @Html.LabelFor(m => m.Name)

so this will take a property as value for our html label

again we can use text box 

or we can use

@Html.TextBoxFor(m => m.Name)


now if we run this we have some pre properties for this tag

for ex

data-val

we need data validation for this field

so this validtion is coming from our model
required length

now as a second argument we can pass
@Html.LabelFor(m => m.Name)
@Html.TextBoxFor(m => m.Name , new { @class = "form-control"})

</div>

<div formgroup>

@Html.LabelFor(m => m.BirthDate)
@Html.TextBoxFor(m => m.BirthDate , new { @class = "form-control"})
<div>

<div formgroup>

@Html.LabelFor(m => m.IsSubscribedToNewsLetter)
@Html.CheckBoxFor(m => m.BirthDate , new { @class = "form-control"})
<div>


we can look for the bootstrap for check box on bootstrap site

css >> form


div class= "checkbox"
label
@html.CheckBoxFor(m => m.IsSubtonews) some text


}

*********Labels

now here if we see the name of the label is exactly the same as
the corresponding property in the customer class

so what if here instead of birthdate i want to display

date Of birth


we go to our customer class

[Display(Name = "Date of Birth")]
public DateTime? Birthdate


the problem with this approachh is we have to recompile our code
i personally prefer to use this helper method


now i want to add a drop down list to select a membershihp type 
for our customer 


so 
back in our controller first we need to get the list of 
membershiptypes

_context.memebershipmodel


so we need to add it as dbset here

_context.MembershipTypes.toList()

we can pass in the view

but this will not work when we are required to edit

so for this case we will need a viewModel


NewCustomerviewModel under viewModel

public class NewcustomerViewModel{

public IEnumerable<MembershipType> MembershipTypes

so if the change the collection in future

as long as the collection implement IEnumerable its good to iterate

so here we will use Customer direclty

this is based on our requ


public class NewcustomerViewModel{

public IEnumerable<MembershipType> MembershipTypes

public Customer Customer {get; set;}
}

so we send this view model by creating a new object

and we update this in our view


now inorder to get the dropdown list


now instead of textboxfor

i will use dropdownlist for 

this is for membershiptypeid

and after that i need to give 

the class which will initialize

and then value 
and then the text which will be displayed


[Display(Name = "Membership Type")]
MembershipTypeId


}

*************** model binding

our form is ready now lets 
implement a button and start saving a customer

so will go to new view

and before this curly braces i am gonna add a view

type of this button should be submit

btn
btn-primay

so we have a target action Create

now lets create an action CALLED create()

now we need to apply 

[HttpPost] to this action


so make sure this will only be called with http post and not http get


and if your actions modify data 

they should never be accesible by httpget


now i am gonna add a parameter here

public ActionResult Create (NewCustomerViewModel viewModel){
// mvc framework will automatically map request data to this object


so this is what we call model binding

if we put our app in debug mode 

and see the network tab we will see our form data



so we use this properties to initilize the parameter of our action

so we can expand in debug mode and see the data it is getting here

now if i change this heading to customer 

mvc is smart enought to bind the customer data
}
saving data

_context.save() commits all transactions at one time