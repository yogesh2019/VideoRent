now we are going to get our data from  db using entity framework

entity framework is a tool we use to access the db

more accurately its classified as orm


in old days we had to do this mapping manually which involved opening a connection to db

with orm we work at a higher level abstraction


it provides a class called dbContext	

dbContext has one or more dbSet 's which represents tables in our db	

we use linq to query these db sets

and entity framework will translate our linq queries to sql at run time

it opens the db maps the data


there are two ways to use entity framwork

db first and code first

***************** dbFirst workflow

in this we generate the corresponding domain classes after creation of database tables



***************** the other way is to create domain classes first and let the entity framework create the db tables for us


i personally favor code first to db first

increased productivity

full versioning of db using migrations

much easier to build an integration test db		

myth :
1 code first work flow on legacy db can be used very efficiently
2 it gives you full control over db



in code first we start with code everytime we modify our domain model
we create a migration and run it on the db

let me show you how it works


package manager console alt + .

first time you need to enable them

when you type 

enable-migrations

now you see a new folder migrations


lets add first migration

since this is a first change i am gonna call it initial model


under this c sharp 

we will see 

aspNetRoles
aspNetUserRoles
aspNetUsers


so where these tables are coming from 

weill this is a part of asp.net identity
which our projects uses to control authentication and authorization


let me show you something

expand models => identity models


here we have two classes 
application user

and application Db context

which der from identitydbContext

this is a gateway to our db



this identitydbContext is a part of asp.net identity framwork


so when i executed add migration 

it looked at our applicationdbContext

and it discovered dbSets in identityDbContext

here we are had all the user

that is why in our call we had created these tables


now we do not see any db sets for movies and customers
so i go back to our identityModels


so this dbSet represennt Customer table in our database

now i go back to our console and create our migration

since it is already there is am gonna use --force swith to override it

add-migration intitialModel -force

lets reload

now lets go back to our migration class

so here we see and attempt to create table with the following names

now lets run this migration and generate our db


cls

update-databse



if i go under show files
we go under appdata
we got this database file lets double click it

so here is our db

we got our tables

so we have tables asp.net which are used for controlling authentication and authorization

we also have customers table with id and name

there is one more table here which we should not touch called migration history



************************************ changing the model ***********

our dommain model is very simple here so will add new props


customer => name, isSubscribedToNewsLetter, MembershipType

membership => payAsYouGo 

monthly =>  $30       10%
quaterly => $90       15%
annual =>   $300      20%


so model this we need a membership type signupfee, duration, discountRate

each customer should have only one and one membership type


when following for code first 

instead of making changes in one go 

we should make changes in small parts

and run small migrations

so back to customers and add

name, bool isSubscribedtoNews

we can name it AddIsSubscribedToCustomer

migration created 
now update-database

now going back to Model

add a new class MembershipType

for signup fee we gonna use short

for durationInMonths

for discountRate lets use byte


lets use byte for id as we have only few membership type

now we need to associate our customer class with membership type

we go to our Customer class 

and add public MembershipType MembershipType {get; set;}


this navigation property is useful when you want to load and object and its related object from db

sometimes for optimization we dont want to load the entire membership object

for that you may need a foreign key

public byte MembershipTypeId

entity framewrk recognises this as a foreign key



now we need to add a migration





******       seeding the database
now if we see under db member ship types

currently this table is empty and we need to populate this table with some records

so our dev, test and prod should have exact same membership types

	
so to make this consistency, 
but we never touch db in code first

everychange in db should go through migration


so we are not supposed to open this table and insert few records

so we use a migration, 
i am gonna add a migration, and call it PopulateMembershipTypes


so its an empty migration

by going in up()

we can add 


Sql("Insert into MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRates) Values (1,0,0,0)")

we can do ctrl +d 

Sql("Insert into MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRates) Values (1,0,0,0)")
Sql("Insert into MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRates) Values (2,30,1,10)")
Sql("Insert into MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRates) Values (3,90,3,15)")
Sql("Insert into MembershipTypes (Id, SignUpFee, DurationInMonths, DiscountRates) Values (4,300,12,20)")


so with code first we do have full  control on db

we can run any query


now we run this migration
update-database


while time of depoying our application we can give all this database from beginning of time to last

and using a cmd in pmc we can generate a sql script to include all these changes

so with code first work flow we have full control over versioning of our database

in the next we will talk about overriding code first conventions


*********** overriding conventions **********


the name is set by entity framwork as nullable

now lets see how we can over ride these default conventions


in our model class customer

above the property 

we define the annotation called 
[Required]
public string Name {get; set;}


with this our customer name will no longer be nullable
[StringLength(255)]


this approach is called annotations

but it has some limitations


now we have create a new migration

as we have changed our domain model
add-migration ApplyAnnotationstoCustomerName	

next we are gonna take a look at how to query objects using entity framework

******************** quering objects

this is my solution to the exercise


i have a method called index

which return View(customers)

here in the action you see a call to getCustomers() method


let take a look at the implemention of this method

private IEnumerable<Customer> GetCustomers(){
	 return new List <Customer>{
		   new Customer{id = 1, Name = "John Smith"},
		   new Customer{id = 2, Name = "Mary Williams"}
	 }
}


firstly we need a dbContext to access the database

so by convention we declare a private field

private ApplicationDbContext _context;

we need to initilise is in the constructors

ctor

public CustomersContrllers(){
  _context = new ApplicationDbContext();
}

dbContext is a disposable object so we need to properly dispose this object

the proper way to do this is to 

override dispose method of base class

protected override void Dispose (bool disposing){
		  _context.Dispose();
}


the second part i will show how we can delegate

instatiating and disposing object using dependency injection framework

now instead of initializing or cusstomers with getCustomers

var customers = _context.Customers;


so this Customers is a property is a DbSet defined in our dbContext


one thing to know about entity framework

when the above line is executed it will not query customers


this is called deferred execution

the query is executed when we iterate over the customers

for example in our view

alternatively we can immedietely execute the query by callin the toList() method



we need to make one more change

and that is in the details method

var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

now we can get rid of getCustomer method

now to test this i will go to the customers table and populate with some recs

so right click customers view data

we just learned that we should not modify this database

in the last lecture we had a different scenario

memmber ship types are reference data so they should be consistent accross differennt env

it does not matter if we have two customers in dev database and 3 in test db

so during deployement we will only be putting migrations

so the arbitrary data be deployed to our database

john smith false 1
mary williams true 2

what if we want to have another column for discount rate
under views => customers > index

first i am gonna add one more heading

th Discount Rate

now we render another td here 
with membershipType.discountRate


we will get error 

because by default entity from only loads the customer object 
and not their related object


so this is why we are getting null

now we need to load customers and membership types together 
this is called eager loading


we go back to our _context.Customers.Indlude(c => c.membershiptype)

we have to get it from systems.entity


now to make it more user friends lets add % symbol here

razor view is smartenought to understand that this % is a text


options keyboard


************** exercise 1
want to replace discount rate with name of membership type.

our membership type currently doesnot have a name 

so you need to modify the domain class and update the database

and create another migration to update the existing

**************** exercise 2

in the customeer details page 
we want more details about that customer
we need membershiptype
and birthdate
so birthdate is an optional or nullable columnn



************ exercise 3 : i want to populate this list of movies from database

and we want a new column genre

similar to membership type genre is reference data that needs to deployed with out application

so make sure to populate the genres table using migrations

for the moveis 
we need genre
release DAte
date added
number in stocks

hints:

the first step is to add a dbSet of movies

in identity models file

the reason why we need is if the movie is not referenced as dbSet

it wont be included in your migration


add additional properties in Movie
populate genres table with a migration
modify moviescontroller and its views	